name: Build Python Bindings

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  workflow_dispatch:

jobs:
  tests:
    name: Tests Py${{ matrix.python }} on ${{ matrix.os }} ${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python: "3.9"
            goarch: amd64
          - os: ubuntu-latest
            python: "3.13"
            goarch: amd64
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Set Up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Show Versions
        run: |
          go version
          python --version
          pip --version

      - name: Install Dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          python3 -m pip install pybindgen
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/go-python/gopy@latest

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install pybindgen
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/go-python/gopy@latest

      - name: Install Python Build and Test Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest pytest-xdist wheel setuptools httpx[socks] requests pysocks

      - name: Generate Python Bindings (Gopy, Unix)
        if: runner.os != 'Windows'
        env:
          CGO_ENABLED: 1
          GOARCH: ${{ matrix.goarch }}
        shell: bash
        run: |
          set -euo pipefail
          PYTHON_OUTPUT_DIR="_bindings/python"
          echo "Generating Python bindings with gopy..."
          orig="linksocks/_python.go"; tmp="linksocks/python.go"; rc=0
          if [ -f "$orig" ]; then cp "$orig" "$tmp"; fi
          gopy build -vm=python -output="${PYTHON_OUTPUT_DIR}/linksockslib" -name=linksockslib -no-make=true -build-tags=gopy github.com/linksocks/linksocks/linksocks || rc=$?
          echo "from .linksocks import *" > "${PYTHON_OUTPUT_DIR}/linksockslib/__init__.py"
          rm -f "$tmp"
          go mod tidy
          exit $rc

      - name: Generate Python Bindings (Gopy, Windows)
        if: runner.os == 'Windows'
        env:
          CGO_ENABLED: 1
          GOARCH: ${{ matrix.goarch }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Generating Python bindings with gopy (Windows)..."
          
          # Use the simple Windows build script for Python 3.13 compatibility
          python _bindings/python/build_windows.py
          if ($LASTEXITCODE -ne 0) { 
            Write-Host "Build script failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE 
          }

      - name: Install Linksocks (Editable)
        run: |
          python -m pip install -e _bindings/python[test]

      - name: Run Pytest
        working-directory: _bindings/python
        run: pytest -v -n auto

  build_linux_wheels:
    if: startsWith(github.ref, 'refs/tags/')
    name: Linux Cp39+ ${{ matrix.arch }} (manylinux)
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for ARM64)
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build Wheels
        uses: pypa/cibuildwheel@v2.16.5
        with:
          package-dir: _bindings/python
          output-dir: wheelhouse
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux_*"
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.arch }}
          path: ./wheelhouse/*.whl


  build_windows_wheels:
    if: startsWith(github.ref, 'refs/tags/')
    name: Windows Cp39+
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Wheels (cibuildwheel)
        uses: pypa/cibuildwheel@v2.16.5
        with:
          package-dir: _bindings/python
          output-dir: wheelhouse
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS: "AMD64"
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-amd64
          path: ./wheelhouse/*.whl

  build_sdist:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel
          
      - name: Build source distribution
        run: |
          cd _bindings/python
          python -m build --sdist --outdir ../../dist/
          
      - name: Upload source distribution
        uses: actions/upload-artifact@v4
        with:
          name: source-dist
          path: ./dist/*.tar.gz