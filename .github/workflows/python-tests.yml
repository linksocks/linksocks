name: Python Tests and Wheels

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "*.md"
  pull_request:
    paths-ignore:
      - "*.md"

jobs:
  python:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Show versions
        run: |
          go version
          python --version
          pip --version

      - name: Install Go build tools
        run: |
          go install github.com/go-python/gopy@latest
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Install Python build and test deps
        run: |
          python -m pip install --upgrade pip
          pip install build pytest pytest-xdist wheel setuptools pybindgen
      

      - name: Generate Python bindings (gopy, Unix)
        if: runner.os != 'Windows'
        env:
          CGO_ENABLED: 1
        shell: bash
        run: |
          set -euo pipefail
          PYTHON_OUTPUT_DIR="_bindings/python"
          echo "Generating Python bindings with gopy..."
          orig="linksocks/_python.go"; tmp="linksocks/python.go"; rc=0
          if [ -f "$orig" ]; then cp "$orig" "$tmp"; fi
          gopy build -vm=python -output="${PYTHON_OUTPUT_DIR}/linksockslib" -name=linksockslib -no-make=true -build-tags=gopy github.com/zetxtech/linksocks/linksocks || rc=$?
          echo "from .linksocks import *" > "${PYTHON_OUTPUT_DIR}/linksockslib/__init__.py"
          rm -f "$tmp"
          go mod tidy
          exit $rc

      - name: Generate Python bindings (gopy, Windows)
        if: runner.os == 'Windows'
        env:
          CGO_ENABLED: 1
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $PYTHON_OUTPUT_DIR = "_bindings/python"
          Write-Host "Generating Python bindings with gopy..."
          $orig = "linksocks/_python.go"
          $tmp = "linksocks/python.go"
          $rc = 0
          if (Test-Path $orig) { Copy-Item $orig $tmp }
          gopy build -vm=python -output="$PYTHON_OUTPUT_DIR/linksockslib" -name=linksockslib -no-make=true -build-tags=gopy github.com/zetxtech/linksocks/linksocks
          if ($LASTEXITCODE -ne 0) { $rc = $LASTEXITCODE }
          "from .linksocks import *" | Set-Content -Path "$PYTHON_OUTPUT_DIR/linksockslib/__init__.py" -Encoding ascii
          if (Test-Path $tmp) { Remove-Item $tmp }
          go mod tidy
          if ($rc -ne 0) { exit $rc }

      - name: Install linksocks (editable) with test extras
        run: |
          python -m pip install -e _bindings/python[test]

      - name: Run pytest
        working-directory: _bindings/python
        run: |
          pytest -v -n auto

      - name: Build wheel (only on tag, Unix)
        if: startsWith(github.ref, 'refs/tags/') && runner.os != 'Windows'
        working-directory: _bindings/python
        shell: bash
        run: |
          set -euo pipefail
          python -m build --wheel --outdir ../../dist

      - name: Build wheel (only on tag, Windows)
        if: startsWith(github.ref, 'refs/tags/') && runner.os == 'Windows'
        working-directory: _bindings/python
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          python -m build --wheel --outdir ../../dist

      - name: Upload wheel artifact (only on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ runner.os }}-py${{ matrix.python-version }}-tag-${{ github.ref_name }}
          path: dist/*.whl
          if-no-files-found: error


