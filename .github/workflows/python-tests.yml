name: Build Python Bindings

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  workflow_dispatch:

jobs:
  tests:
    name: Tests Py${{ matrix.python }} on ${{ matrix.os }} ${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python: "3.9"
            goarch: amd64
          - os: ubuntu-latest
            python: "3.13"
            goarch: amd64
          - os: windows-latest
            python: "3.9"
            goarch: amd64
          - os: windows-latest
            python: "3.13"
            goarch: amd64
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Set Up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Show Versions
        run: |
          go version
          python --version
          pip --version

      - name: Install Dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          python3 -m pip install pybindgen
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/go-python/gopy@latest

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m pip install pybindgen
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/go-python/gopy@latest

      - name: Install Python Build and Test Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest pytest-xdist wheel setuptools httpx[socks] requests pysocks

      - name: Generate Python Bindings (Gopy, Unix)
        if: runner.os != 'Windows'
        env:
          CGO_ENABLED: 1
          GOARCH: ${{ matrix.goarch }}
        shell: bash
        run: |
          set -euo pipefail
          PYTHON_OUTPUT_DIR="_bindings/python"
          echo "Generating Python bindings with gopy..."
          orig="linksocks/_python.go"; tmp="linksocks/python.go"; rc=0
          if [ -f "$orig" ]; then cp "$orig" "$tmp"; fi
          gopy build -vm=python -output="${PYTHON_OUTPUT_DIR}/linksockslib" -name=linksockslib -no-make=true -build-tags=gopy github.com/zetxtech/linksocks/linksocks || rc=$?
          echo "from .linksocks import *" > "${PYTHON_OUTPUT_DIR}/linksockslib/__init__.py"
          rm -f "$tmp"
          go mod tidy
          exit $rc

      - name: Generate Python Bindings (Gopy, Windows)
        if: runner.os == 'Windows'
        env:
          CGO_ENABLED: 1
          GOARCH: ${{ matrix.goarch }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Generating Python bindings with gopy (Windows)..."
          
          # Use the specialized Windows build script for Python 3.13 compatibility
          python _bindings/python/build_windows.py
          if ($LASTEXITCODE -ne 0) { 
            Write-Host "Build script failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE 
          }

      - name: Install Linksocks (Editable)
        run: |
          python -m pip install -e _bindings/python[test]

      - name: Run Pytest
        working-directory: _bindings/python
        run: pytest -v -n auto

  build_macos:
    if: startsWith(github.ref, 'refs/tags/')
    name: MacOS ${{ matrix.os_version }} Cp3${{ matrix.python3_version }} ${{ matrix.arch_cibw_go[0] }}
    strategy:
      fail-fast: false
      matrix:
        os_version: [ 11, 12 ]
        python3_version: [ 9, 10, 11, 12, 13 ]
        arch_cibw_go:
          - [ "x86_64", "amd64" ]
          - [ "arm64", "arm64" ]
        exclude:
          - python3_version: 9
            arch_cibw_go: [ "arm64", "arm64"]
    runs-on: macos-${{ matrix.os_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install Gopy
        run: go install github.com/go-python/gopy@latest

      - name: Install Goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Install Python 3.${{ matrix.python3_version }} 
        run: |
          brew install python@3.${{ matrix.python3_version }}
          ln -s /usr/local/opt/python@3.${{ matrix.python3_version }}/bin/python3.${{ matrix.python3_version }}  /usr/local/bin/python_for_build
          /usr/local/bin/python_for_build --version

      - name: Install Cibuildwheel and Pybindgen
        run: /usr/local/bin/python_for_build -m pip install cibuildwheel pybindgen

      - name: Build Wheels
        run: /usr/local/bin/python_for_build -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.arch_cibw_go[0] }}
          PYTHON_BINARY_PATH: /usr/local/bin/python_for_build
          CIBW_BUILD: "cp3${{ matrix.python3_version }}-*"
          CIBW_ENVIRONMENT: >
            PATH=$PATH:/usr/local/go/bin
            GOARCH=${{ matrix.arch_cibw_go[1] }}
            CGO_ENABLED=1
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.os_version }}-cp3${{ matrix.python3_version }}-${{ matrix.arch_cibw_go[0] }}
          path: ./wheelhouse/*.whl

  build_linux_x86_64:
    if: startsWith(github.ref, 'refs/tags/')
    name: Linux Cp39+ x86_64 (manylinux)
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Build Wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux_x86_64"
          CIBW_ARCHS: "x86_64"
          CIBW_ENVIRONMENT: >
            PATH=$PATH:/usr/local/go/bin
            CGO_ENABLED=1
          CIBW_BEFORE_ALL_LINUX: |
            curl -o go.tar.gz https://dl.google.com/go/go1.21.6.linux-amd64.tar.gz
            tar -C /usr/local -xzf go.tar.gz
            go install github.com/go-python/gopy@latest
            go install golang.org/x/tools/cmd/goimports@latest
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: ./wheelhouse/*.whl

  build_windows:
    if: startsWith(github.ref, 'refs/tags/')
    name: Windows Cp39+ x86_64
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v4

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install Gopy
        run: go install github.com/go-python/gopy@latest

      - name: Install Goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Build Wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS: "AMD64"
          CIBW_ENVIRONMENT: >
            GOARCH=amd64
            CGO_ENABLED=1
          CIBW_BEFORE_BUILD_WINDOWS: python _bindings/python/cibw_before_build_windows.py

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-x86_64
          path: ./wheelhouse/*.whl


